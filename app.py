# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aQBByiZi8sCMFL3t0ZRqg7nIpbZIwz86
"""

import streamlit as st
import google.generativeai as genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types
from PIL import Image
import io
import base64
import os

# Configuração da API KEY do Google Gemini (use st.secrets)
GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
genai.configure(api_key=GOOGLE_API_KEY)

# Função utilitária para chamar o agente (adaptada para Streamlit)
def call_agent(agent: Agent, image_bytes: Union[bytes, None] = None, message_text: Union[str, None] = None) -> str:
    session_service = InMemorySessionService()
    content_parts: List[types.Part] = []
    if message_text:
        content_parts.append(types.Part(text=message_text))
    if image_bytes:
        encoded_image = base64.b64encode(image_bytes).decode('utf-8')
        content_parts.append(types.Part(
            inline_data=types.Blob(mime_type="image/jpeg", data=encoded_image)
        ))
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=content_parts)
    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text + "\n"
    return final_response

##########################################
# --- Agente 1: Analista de Imagem --- #
##########################################
def agente_imagem(imagem_produto_bytes):
    analista_imagem = Agent(
        name="agente_imagem",
        model="gemini-2.0-flash",
        description="Agente que processa a imagem com a SDK do Gemini e extrai as características visuais.",
        instruction="""
        Você é um agente de imagem. A sua tarefa é analisar a imagem deste produto e descrever suas características visuais principais,
        incluindo cor, formato, material aparente e quaisquer detalhes de design ou textura.
        Liste as características de forma concisa. Você deve ignorar o que o modelo estiver calçando, porque o produto a ser vendido é apenas o pijama.
        Você precisa considerar se o modelo é adulto ou infantil, feminino ou masculino para informar que o produto é adulto ou infantil, feminino ou masculino.
        """
    )
    caracteristicas_visuais = call_agent(analista_imagem, image_bytes=imagem_produto_bytes, message_text="Por favor, descreva esta imagem:")
    return caracteristicas_visuais

#######################################################
# --- Agente 2: Analista de Texto e Enriquecimento --- #
#######################################################
def agente_analista_texto(caracteristicas_visuais, info_textual_adicional):
    analista_texto = Agent(
        name="agente_analista_texto",
        model="gemini-2.0-flash",
        description="Agente que combina características visuais com informações textuais para enriquecer a descrição do produto.",
        instruction="""
        Você é um analista de imagem enriquecido. Sua tarefa é combinar as características visuais do produto,
        fornecidas anteriormente, com as informações textuais adicionais, fornecidas pelo usuário.
        Use ambas as fontes de informação para criar uma descrição completa e detalhada do produto.
        Inclua detalhes que não eram visíveis apenas na imagem, mas que foram mencionados nas informações textuais.
        Formule uma descrição fluida e informativa que combine todos os dados disponíveis.
        """
    )
    entrada_do_agente_analista_texto = f"""
    Características Visuais: {caracteristicas_visuais}

    Informações Textuais Adicionais: {info_textual_adicional}

    Por favor, crie uma descrição enriquecida do produto com base nessas informações.
    """
    descricao_enriquecida = call_agent(analista_texto, message_text=entrada_do_agente_analista_texto)
    return descricao_enriquecida

################################################################
# --- Agente 3: Otimizador de SEO e Redator de Descrições --- #
################################################################
def agente_otimizador_redator(descricao_preliminar):
    otimizador_redator = Agent(
        name="agente_otimizador_redator",
        model="gemini-2.0-flash",
        description="Agente que otimiza descrições de produtos para SEO e vendas online.",
        instruction="""
        Você é um Analista Otimizador de SEO e Redator de Descrições especializado em e-commerce.
        Sua tarefa é pegar a descrição preliminar de um produto e otimizá-la para vendas online e motores de busca (SEO).

        Para otimizar a descrição:
        1. Analise a descrição preliminar para entender o produto e suas características.
        2. Pense em palavras-chave relevantes que os clientes usariam para buscar este tipo de produto online.
        3. Incorpore naturalmente essas palavras-chave ao longo da descrição, especialmente no início.
        4. Use linguagem persuasiva focada nos benefícios para o cliente. Destaque como o produto resolve um problema ou atende a uma necessidade.
        5. Mantenha a descrição concisa e fácil de ler. Não use bullet points e gere frases curtas se apropriado.

        Crie a descrição otimizada para SEO e vendas.
            """
    )
    entrada_do_agente_otimizador_redator = f"""
    Descrição Preliminar: {descricao_preliminar}

    Por favor, otimize esta descrição para SEO e vendas online.
    """
    descricao_otimizada = call_agent(otimizador_redator, message_text=entrada_do_agente_otimizador_redator)
    return descricao_otimizada

# Interface Streamlit
st.title("DescreveAI: Descrições de Produtos Inteligentes")

# Configuração da chave de API usando st.secrets
with st.sidebar:
    st.subheader("Configuração da API")
    st.info("Certifique-se de ter sua `GOOGLE_API_KEY` configurada em `.streamlit/secrets.toml`")

uploaded_file = st.file_uploader("Carregue a imagem do produto", type=["jpg", "jpeg", "png"])
additional_text = st.text_area("Informações adicionais sobre o produto (opcional)")

if uploaded_file is not None:
    image_bytes = uploaded_file.read()
    image = Image.open(io.BytesIO(image_bytes))
    st.image(image, caption="Imagem do Produto Carregada.", use_column_width=True)

    if st.button("Gerar Descrição"):
        with st.spinner("Analisando a imagem..."):
            imagens_analisadas = agente_imagem(image_bytes)
            st.subheader("Análise da Imagem:")
            st.write(imagens_analisadas)

        with st.spinner("Enriquecendo a descrição..."):
            descricao_imagem = agente_analista_texto(imagens_analisadas, additional_text)
            st.subheader("Descrição Enriquecida:")
            st.write(descricao_imagem)

        with st.spinner("Otimizando para SEO..."):
            descricao_final = agente_otimizador_redator(descricao_imagem)
            st.subheader("Descrição Otimizada para SEO:")
            st.write(descricao_final)

else:
    st.info("Por favor, carregue uma imagem do produto para começar.")